public class MergeMarks {
    public static boolean areEqual(float[] a, float[] b) {
        return a[0] == b[0] && a[1] == b[1];
    }

    public static int comparator(float[][] arr, int i, int j) {
        double rms1 = Math.sqrt(0.5 * (arr[i][0]*arr[i][0] + arr[i][1]*arr[i][1]));
        double rms2 = Math.sqrt(0.5 * (arr[j][0]*arr[j][0] + arr[j][1]*arr[j][1]));
        if (rms1 > rms2) return -1;
        else if (rms1 < rms2) return 1;
        else return Float.compare(arr[i][1], arr[j][1]) * -1;
    }

    public static int merge(float[][] sorted, float[][] merged, int bp, int n) {
        int i = 0, j = bp, k = 0;
        while (i < bp && j < n) {
            if (areEqual(sorted[i], sorted[j])) {
                i++;
                j++;
            } else if (comparator(sorted, i, j) < 0) {
                merged[k++] = sorted[i++];
            } else {
                merged[k++] = sorted[j++];
            }
        }
        while (i < bp) merged[k++] = sorted[i++];
        while (j < n) merged[k++] = sorted[j++];
        return k;
    }
}

Input:
Already-sorted arrays (input via code or scanner)
Letâ€™s say 1st half: {{90, 30}, {60, 20}, {30, 40}}
2nd half: {{0, 100}, {10, 90}, {50, 10}}

Output:
Merged sorted list of marks (based on RMS), duplicates removed
